module tb;
    reg reset,clk;
    wire RegDst,Jump,Branch,MemRead,MemtoReg,MemWrite,ALUSrc,RegWrite,zero,andout;
    wire [4:0] reg1,reg2;
    wire [1:0] ALUOp;
    wire [2:0] alucontrol;
    wire [31:0] nextpc,currentpc,pc4,instr,ReadData1,ReadData2,extend,muxextend,rez,dataout,muxdata,shiftextend,newaddress,pisic,muxaddr;
    wire [27:0] shift28;
    wire [4:0] muxreg;
    assign reg1 =instr[25:21];
    assign reg2 =instr[20:16];
    PC pc(nextpc,clk,reset,currentpc);
    Add4 add4(currentpc,pc4);
    InstrMem instrmem(currentpc,instr);
    Control control(reset,instr[31:26],RegDst,Jump,Branch,MemRead,MemtoReg,ALUOp,MemWrite,ALUSrc,RegWrite);
    MUX2_1 #(5) mucs1(instr[20:16],instr[15:11],RegDst,muxreg);
    Registers regos(clk,reset,instr[25:21], instr[20:16], muxreg, muxdata, RegWrite, ReadData1, ReadData2);
    Sign_Extend sgnext(instr[15:0],extend);
    ALUControl alucrtl(instr[5:0],ALUOp,alucontrol);
    MUX2_1 #(32) mucs2(ReadData2,extend,ALUSrc,muxextend);
    ALU alusu(reset,ReadData1,muxextend,alucontrol,clk,rez,zero);
    DataMemory datamem(clk,reset,rez,ReadData2,MemWrite,MemRead,dataout);
    MUX2_1 #(32) mucs3(rez,dataout,MemtoReg,muxdata);
    AND_gate andg(Branch,zero,andout);
    ShiftLeft2_32 shft1(extend,shiftextend);
    ShiftLeft2_26 shft2(instr[25:0],shift28);
    Add32b add32b(pc4,shiftextend,newaddress);
    concat miau(pc4[31:28],shift28,pisic);
    MUX2_1 #(32) mucs4(pc4,newaddress,andout,muxaddr);//mux intre pc normal si pc cu branch/jump
    MUX2_1 #(32) mucs5(muxaddr,pisic,Jump,nextpc);
        integer i;
    initial begin clk=1; reset=1;#11 reset=0;  end
    initial begin 
    for(i=0;i<200;i=i+1)
        #5 clk=~clk;
    #100 $finish();
    //#10 $display("PC = %h , Instr = %b\n",currentpc,instr);
    end

endmodule

module PC(in,clk,reset,out);
  input [31:0]in;
  input clk,reset;
  output reg [31:0]out;
  initial out<=32'h10000000;
  always@(posedge clk)begin
    if(reset==1)
    out<=32'h10000000;
    else
    out<=in;
    end
endmodule

module InstrMem(in,out);
  input [31:0] in;
  output reg [31:0] out;
  reg [31:0] instr [0:199];
  // cititre din fisier a instructiunilor
  // out e codificarea instructiunii
  // in e adresa din fisier 
  // fiecare instructiune are 4bytes
  integer i;
  initial begin
    $readmemb("instr.mem",instr); //citire de instructiuni toate deodata la inceputul rularii
    //for(i=0;i<10;i=i+1)
    //$display("INSTRUCTIUNE %d = %b",i,instr[i]);
  end
  always@(in) begin
    out=instr[(in-32'h10000000)/4]; // initial pc ar trebui sa fie 0x10000000
  end
endmodule

module Control(reset, opcode, RegDst, Jump, Branch, MemRead, MemToReg, ALUOp, MemWrite, ALUSrc, RegWrite);
  input [5:0] opcode;
  input reset;
  output reg RegDst, Jump, Branch, MemRead, MemToReg,  MemWrite, ALUSrc, RegWrite;
  output reg [1:0] ALUOp;
  
  // de facut case
  always@(opcode or reset)
  if(reset==0)
    casex(opcode)
        6'b000000: {RegDst, Jump, Branch, MemRead, MemToReg, ALUOp,  MemWrite, ALUSrc, RegWrite} = 10'b1_0_0_0_0_10_0_0_1; //R-TYPE
        6'b100011: {RegDst, Jump, Branch, MemRead, MemToReg, ALUOp,  MemWrite, ALUSrc, RegWrite} = 10'b0_0_0_1_1_00_0_1_1; //LW
        6'b101011: {RegDst, Jump, Branch, MemRead, MemToReg, ALUOp,  MemWrite, ALUSrc, RegWrite} = 10'bX_0_0_0_X_00_1_1_0; //SW
        6'b000100: {RegDst, Jump, Branch, MemRead, MemToReg, ALUOp,  MemWrite, ALUSrc, RegWrite} = 10'bX_0_1_0_X_01_0_0_0; //BEQ
        6'b001000: {RegDst, Jump, Branch, MemRead, MemToReg, ALUOp,  MemWrite, ALUSrc, RegWrite} = 10'b0_0_0_0_0_00_0_1_1; //ADDI
        6'b000010: {RegDst, Jump, Branch, MemRead, MemToReg, ALUOp,  MemWrite, ALUSrc, RegWrite} = 10'bX_1_0_X_0_XX_0_X_0; //J
        //doar cateva instructiuni
    endcase
  else
    {RegDst, Jump, Branch, MemRead, MemToReg, ALUOp,  MemWrite, ALUSrc, RegWrite} = 10'b0_0_0_0_0_00_0_0_0; //no balls
  
endmodule

module MUX2_1 #(parameter n = 1) (a,b,sel,out);
  input [n-1:0]a,b;
  input sel; //mereu pe 1 bit
  output reg [n-1:0]out;
  always@(a or b or sel)
   	begin
      if(sel==0)
        out=a;
      else
        out=b;
    end
  
endmodule

module Sign_Extend(in,out);
  input [15:0] in;
  output [31:0] out;
  //adauga 16 biti de 0 la dreapta
  assign out = {16'b0,in};
endmodule

module Registers(clk,reset,ReadReg1, ReadReg2, WriteReg, WriteData, RegWrite, ReadData1, ReadData2);
  input [4:0]ReadReg1,ReadReg2,WriteReg; //registrii care sunt reprezentati pe 5 biti
  input RegWrite,clk,reset; // regwrite flag pentru asta
  input [31:0] WriteData; //writedata pentru scris in writereg,data pe 32 biti
  output reg [31:0] ReadData1,ReadData2;
  reg [31:0] regs [0:31]; //32 de registrii pe 32 de biti
  integer i;
  initial begin
  $readmemh("regs.mem",regs);
  //forever regs[0]<=0;//$zero <-------------------------------------------warning!
//  for(i=0;i<31;i=i+1) // initializare toti registrii cu 0
//    regs[i]=0;
//    for(i=0;i<31;i=i+1)
//       $display("REG %d = %h\n",i,regs[i]);
  end
  always @(posedge clk,ReadReg1,ReadReg2,WriteReg,RegWrite) //flagul
    begin
        if(reset==0)
        begin
         ReadData1<=regs[ReadReg1];
         ReadData2<=regs[ReadReg2];
         $display("reg1 = %d   reg2 = %d", ReadData1,ReadData2);
        end
        else
        begin
         ReadData1<=0;
         ReadData2<=0;
        end
    end 
    always@(negedge clk,WriteData)begin
    if(reset==0)begin
        if(RegWrite==1) begin
        
            regs[WriteReg]<=WriteData; // in registrul writereg scriu writedata
            $display("ce %h",WriteData);
        end
        regs[0]=0;
    end
    end
    /*
  always @(ReadReg1)
     ReadData1=regs[ReadReg1];
  always @(ReadReg2)
     ReadData2=regs[ReadReg2];*/
endmodule

module Add4(in,out);
  input [31:0]in;
  output [31:0]out;
  assign out=in+4;
endmodule

module ShiftLeft2_26(in,out);
  input [25:0]in;
  output reg [27:0]out;
  always@(in)
    out={in,2'b00};
endmodule

module ShiftLeft2_32(in,out);
  input [31:0]in;
  output [31:0]out;
  assign out={in[29:0],2'b0};
endmodule

module Add32b(a,b,out);
  input[31:0]a,b;
  output[31:0]out;
  assign out=a+b;
  
endmodule

module ALUControl(fn,ALUOp,out);
  input [5:0] fn;
  input [1:0] ALUOp;
  output reg [2:0] out;
  always@(ALUOp,fn)
    casex({ALUOp,fn})
        8'b00_XXXXXX:out=010;//add
        8'bX1_XXXXXX:out=110;//sub
        8'b1X_100000:out=010;//add
        8'b1X_100010:out=110;//sub
        8'b1X_100100:out=000;//and
        8'b1X_100101:out=001;//or
        8'b1X_100110:out=100;//xor
        8'b1X_101010:out=111;//set less than        
    endcase
endmodule

module AND_gate(a,b,out);
  input a,b;
  output reg out;
  always@(a or b)
    begin
    	if(a==1 && b==1)
     	 out=1;
  		else out=0;
  	end
endmodule

module ALU(reset,a,b,ALUControl,clk,rez,zero);
  input [31:0]a,b;
  input [2:0]ALUControl;
  input clk,reset;
  output reg [31:0] rez;
  output zero;
  assign zero=(rez==0);
  always@(a or b or ALUControl)begin
    if(reset==0) begin
        casex(ALUControl)
            3'b010: rez=a+b;//add
            3'b110: rez=a-b;//sub
            3'b000: rez=a&b;//and
            3'b001: rez=a|b;//or
            3'b100: rez=a^b;//xor
            3'b111: rez=(a<b);//set less than
        endcase 
    end 
    else 
        rez=0; 
    end
endmodule

module DataMemory(clk,reset,address,WriteData,MemWrite,MemRead,ReadData);
  input [31:0] address, WriteData;
  input MemWrite,MemRead,clk,reset;
  output reg [31:0] ReadData;
  // de facut scriere in memorie
  reg [31:0] memorie [0:199];
  integer i;
  initial  begin
    $readmemb("data.mem",memorie);
    
  end
  always @(negedge clk) begin
    if (reset == 0) begin
        if (MemRead) begin
            ReadData <= memorie[address];
            $display("memoria ete %h", memorie[address]);
        end
    end else begin
        ReadData <= 0;
    end
  end
    
    
  always@(/*address or WriteData or MemWrite or MemRead or*/ posedge clk)
    begin
        if(MemWrite)begin
            memorie[address]<=WriteData;   
            $display("AM SCRIS IN ADRESA %d MEMORIA %h ",address,memorie[address]);
            end 
    end
    
endmodule

module concat(a,b,out); //pentru sarit undeva branch
  input [3:0] a;
  input [27:0] b;
  output reg [31:0] out;
  initial out<=0;
  always@(a or b)
    out = {a,b};
endmodule
