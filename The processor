module tb;
    reg reset,clk;
    wire [31:0] nextpc,currentpc,pc4;
    PC pc(nextpc,clk,reset,currentpc);
    ADD4(currentpc,pc4);
    

endmodule

module PC(in,clk,reset,out);
  input [31:0]in;
  input clk,reset;
  output reg [31:0]out;
  always@(posedge clk)
    if(reset==1)
    out=0;
    else
    out<=in;
endmodule

module InstrMem(in,out);
  input [31:0] in;
  output [31:0] out;
  reg [31:0] instr [199:0];
  // cititre din fisier a instructiunilor
  // out e codificarea instructiunii
  // in e adresa din fisier 
  // fiecare instructiune are 4bytes
  initial begin
    $readmemh("instr.txt",instr,0,10); //citire de instructiuni toate deodata la inceputul rularii
    
  end
  
endmodule

module Control(opcode, RegDst, Jump, Branch, MemRead, MemToReg, ALUOp, MemWrite, ALUSrc, RegWrite);
  input [5:0] opcode;
  output reg RegDst, Jump, Branch, MemRead, MemToReg,  MemWrite, ALUSrc, RegWrite;
  output reg [1:0] ALUOp;
  
  // de facut case
  always@(opcode)
    casex(opcode)
        6'b000000: {RegDst, Jump, Branch, MemRead, MemToReg, ALUOp,  MemWrite, ALUSrc, RegWrite} <= 10'b1_0_0_0_0_10_0_0_1; //R-TYPE
        6'b100011: {RegDst, Jump, Branch, MemRead, MemToReg, ALUOp,  MemWrite, ALUSrc, RegWrite} <= 10'b0_0_0_1_1_00_0_1_1; //LW
        6'b101011: {RegDst, Jump, Branch, MemRead, MemToReg, ALUOp,  MemWrite, ALUSrc, RegWrite} <= 10'bX_0_0_0_X_00_1_1_0; //SW
        6'b000100: {RegDst, Jump, Branch, MemRead, MemToReg, ALUOp,  MemWrite, ALUSrc, RegWrite} <= 10'bX_0_1_0_X_01_0_0_0; //BEQ
        6'b001000: {RegDst, Jump, Branch, MemRead, MemToReg, ALUOp,  MemWrite, ALUSrc, RegWrite} <= 10'b1_0_0_0_0_00_0_1_1; //ADDI
        6'b001000: {RegDst, Jump, Branch, MemRead, MemToReg, ALUOp,  MemWrite, ALUSrc, RegWrite} <= 10'bX_1_0_X_0_XX_0_X_0; //J
        //doar cateva instructiuni
    endcase
  
endmodule

module MUX2_1 #(parameter n = 1) (a,b,sel,out);
  input [n-1:0]a,b;
  input sel; //mereu pe 1 bit
  output reg [n-1:0]out;
  always@(sel)
   	begin
      if(sel==0)
        out<=a;
      else
        out<=b;
    end
  
endmodule

module Sign_Extend(in,out);
  input [15:0] in;
  output [31:0] out;
  //adauga 16 biti de 0 la dreapta
  assign out = {16'b0,in};
endmodule

module Registers(clk,ReadReg1, ReadReg2, WriteReg, WriteData, RegWrite, ReadData1, ReadData2);
  input [4:0]ReadReg1,ReadReg2,WriteReg; //registrii care sunt reprezentati pe 5 biti
  input RegWrite,clk; // regwrite flag pentru asta
  input [31:0] WriteData; //writedata pentru scris in writereg,data pe 32 biti
  output reg [31:0] ReadData1,ReadData2;
  reg [31:0] regs [4:0]; //32 de registrii pe 32 de biti
  integer i;
  initial begin
  for(i=0;i<31;i=i+1) // initializare toti registrii cu 0
    regs[i]=0;
  end
  always @(posedge clk) //flagul
        if(RegWrite==1) begin
            regs[WriteReg]<=WriteData; // in registrul writereg scriu writedata
            ReadData1=regs[ReadReg1];
            ReadData2=regs[ReadReg2];
        end
endmodule

module Add4(in,out);
  input [31:0]in;
  output [31:0]out;
  assign out=in+4;
endmodule

module ShiftLeft2_26(in,out);
  input [25:0]in;
  output [27:0]out;
  assign out={in,2'b0};
endmodule

module ShiftLeft2_32(in,out);
  input [31:0]in;
  output [31:0]out;
  assign out={in[29:0],2'b0};
endmodule

module Add32b(a,b,out);
  input[31:0]a,b;
  output[31:0]out;
  assign out=a+b;
  
endmodule

module ALUControl(fn,ALUOp,out);
  input [5:0] fn;
  input [1:0] ALUOp;
  output reg [2:0] out;
  always@(ALUOp,fn)
    casex({ALUOp,fn})
        8'b00_XXXXXX:out=010;//add
        8'bX1_XXXXXX:out=110;//sub
        8'b1X_100000:out=010;//add
        8'b1X_100010:out=110;//sub
        8'b1X_100100:out=000;//and
        8'b1X_100101:out=001;//or
        8'b1X_101010:out=111;//set less than        
    endcase
endmodule

module AND_gate(a,b,out);
  input a,b;
  output reg out;
  always@(a or b)
    begin
    	if(a==1 && b==1)
     	 out<=1;
  		else out<=0;
  	end
endmodule

module ALU(a,b,ALUControl,rez,zero);
  input [31:0]a,b;
  input [2:0]ALUControl;
  output reg [31:0] rez;
  output zero;
  always@(ALUControl)
    casex(ALUControl)
        3'b010: rez=a+b;//add
        3'b110: rez=a-b;//sub
        3'b000: rez=a&b;//and
        3'b001: rez=a|b;//or
        3'b111: rez=(a<b);//set less than
    endcase  
endmodule

module DataMemory(address,WriteData,MemWrite,ReadData);
  input [31:0] address, WriteData;
  input MemWrite;
  output [31:0] ReadData;
  // de facut scriere in memorie
endmodule

module concat(a,b,out); //pentru sarit undeva branch
  input [27:0] a;
  input [3:0] b;
  output [31:0] out;
  assign out = {b,a};
endmodule
